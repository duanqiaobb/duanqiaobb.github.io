<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
<!-- 2017-04-22 Sat 21:02 -->
<meta http-equiv="Content-Type" content="text/html;charset=utf-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title></title>
<meta name="generator" content="Org mode" />
<style type="text/css">
 <!--/*--><![CDATA[/*><!--*/
  .title  { text-align: center;
             margin-bottom: .2em; }
  .subtitle { text-align: center;
              font-size: medium;
              font-weight: bold;
              margin-top:0; }
  .todo   { font-family: monospace; color: red; }
  .done   { font-family: monospace; color: green; }
  .priority { font-family: monospace; color: orange; }
  .tag    { background-color: #eee; font-family: monospace;
            padding: 2px; font-size: 80%; font-weight: normal; }
  .timestamp { color: #bebebe; }
  .timestamp-kwd { color: #5f9ea0; }
  .org-right  { margin-left: auto; margin-right: 0px;  text-align: right; }
  .org-left   { margin-left: 0px;  margin-right: auto; text-align: left; }
  .org-center { margin-left: auto; margin-right: auto; text-align: center; }
  .underline { text-decoration: underline; }
  #postamble p, #preamble p { font-size: 90%; margin: .2em; }
  p.verse { margin-left: 3%; }
  pre {
    border: 1px solid #ccc;
    box-shadow: 3px 3px 3px #eee;
    padding: 8pt;
    font-family: monospace;
    overflow: auto;
    margin: 1.2em;
  }
  pre.src {
    position: relative;
    overflow: visible;
    padding-top: 1.2em;
  }
  pre.src:before {
    display: none;
    position: absolute;
    background-color: white;
    top: -10px;
    right: 10px;
    padding: 3px;
    border: 1px solid black;
  }
  pre.src:hover:before { display: inline;}
  /* Languages per Org manual */
  pre.src-asymptote:before { content: 'Asymptote'; }
  pre.src-awk:before { content: 'Awk'; }
  pre.src-C:before { content: 'C'; }
  /* pre.src-C++ doesn't work in CSS */
  pre.src-clojure:before { content: 'Clojure'; }
  pre.src-css:before { content: 'CSS'; }
  pre.src-D:before { content: 'D'; }
  pre.src-ditaa:before { content: 'ditaa'; }
  pre.src-dot:before { content: 'Graphviz'; }
  pre.src-calc:before { content: 'Emacs Calc'; }
  pre.src-emacs-lisp:before { content: 'Emacs Lisp'; }
  pre.src-fortran:before { content: 'Fortran'; }
  pre.src-gnuplot:before { content: 'gnuplot'; }
  pre.src-haskell:before { content: 'Haskell'; }
  pre.src-java:before { content: 'Java'; }
  pre.src-js:before { content: 'Javascript'; }
  pre.src-latex:before { content: 'LaTeX'; }
  pre.src-ledger:before { content: 'Ledger'; }
  pre.src-lisp:before { content: 'Lisp'; }
  pre.src-lilypond:before { content: 'Lilypond'; }
  pre.src-lua:before { content: 'Lua'; }
  pre.src-matlab:before { content: 'MATLAB'; }
  pre.src-mscgen:before { content: 'Mscgen'; }
  pre.src-ocaml:before { content: 'Objective Caml'; }
  pre.src-octave:before { content: 'Octave'; }
  pre.src-org:before { content: 'Org mode'; }
  pre.src-oz:before { content: 'OZ'; }
  pre.src-plantuml:before { content: 'Plantuml'; }
  pre.src-processing:before { content: 'Processing.js'; }
  pre.src-python:before { content: 'Python'; }
  pre.src-R:before { content: 'R'; }
  pre.src-ruby:before { content: 'Ruby'; }
  pre.src-sass:before { content: 'Sass'; }
  pre.src-scheme:before { content: 'Scheme'; }
  pre.src-screen:before { content: 'Gnu Screen'; }
  pre.src-sed:before { content: 'Sed'; }
  pre.src-sh:before { content: 'shell'; }
  pre.src-sql:before { content: 'SQL'; }
  pre.src-sqlite:before { content: 'SQLite'; }
  /* additional languages in org.el's org-babel-load-languages alist */
  pre.src-forth:before { content: 'Forth'; }
  pre.src-io:before { content: 'IO'; }
  pre.src-J:before { content: 'J'; }
  pre.src-makefile:before { content: 'Makefile'; }
  pre.src-maxima:before { content: 'Maxima'; }
  pre.src-perl:before { content: 'Perl'; }
  pre.src-picolisp:before { content: 'Pico Lisp'; }
  pre.src-scala:before { content: 'Scala'; }
  pre.src-shell:before { content: 'Shell Script'; }
  pre.src-ebnf2ps:before { content: 'ebfn2ps'; }
  /* additional language identifiers per "defun org-babel-execute"
       in ob-*.el */
  pre.src-cpp:before  { content: 'C++'; }
  pre.src-abc:before  { content: 'ABC'; }
  pre.src-coq:before  { content: 'Coq'; }
  pre.src-groovy:before  { content: 'Groovy'; }
  /* additional language identifiers from org-babel-shell-names in
     ob-shell.el: ob-shell is the only babel language using a lambda to put
     the execution function name together. */
  pre.src-bash:before  { content: 'bash'; }
  pre.src-csh:before  { content: 'csh'; }
  pre.src-ash:before  { content: 'ash'; }
  pre.src-dash:before  { content: 'dash'; }
  pre.src-ksh:before  { content: 'ksh'; }
  pre.src-mksh:before  { content: 'mksh'; }
  pre.src-posh:before  { content: 'posh'; }
  /* Additional Emacs modes also supported by the LaTeX listings package */
  pre.src-ada:before { content: 'Ada'; }
  pre.src-asm:before { content: 'Assembler'; }
  pre.src-caml:before { content: 'Caml'; }
  pre.src-delphi:before { content: 'Delphi'; }
  pre.src-html:before { content: 'HTML'; }
  pre.src-idl:before { content: 'IDL'; }
  pre.src-mercury:before { content: 'Mercury'; }
  pre.src-metapost:before { content: 'MetaPost'; }
  pre.src-modula-2:before { content: 'Modula-2'; }
  pre.src-pascal:before { content: 'Pascal'; }
  pre.src-ps:before { content: 'PostScript'; }
  pre.src-prolog:before { content: 'Prolog'; }
  pre.src-simula:before { content: 'Simula'; }
  pre.src-tcl:before { content: 'tcl'; }
  pre.src-tex:before { content: 'TeX'; }
  pre.src-plain-tex:before { content: 'Plain TeX'; }
  pre.src-verilog:before { content: 'Verilog'; }
  pre.src-vhdl:before { content: 'VHDL'; }
  pre.src-xml:before { content: 'XML'; }
  pre.src-nxml:before { content: 'XML'; }
  /* add a generic configuration mode; LaTeX export needs an additional
     (add-to-list 'org-latex-listings-langs '(conf " ")) in .emacs */
  pre.src-conf:before { content: 'Configuration File'; }

  table { border-collapse:collapse; }
  caption.t-above { caption-side: top; }
  caption.t-bottom { caption-side: bottom; }
  td, th { vertical-align:top;  }
  th.org-right  { text-align: center;  }
  th.org-left   { text-align: center;   }
  th.org-center { text-align: center; }
  td.org-right  { text-align: right;  }
  td.org-left   { text-align: left;   }
  td.org-center { text-align: center; }
  dt { font-weight: bold; }
  .footpara { display: inline; }
  .footdef  { margin-bottom: 1em; }
  .figure { padding: 1em; }
  .figure p { text-align: center; }
  .inlinetask {
    padding: 10px;
    border: 2px solid gray;
    margin: 10px;
    background: #ffffcc;
  }
  #org-div-home-and-up
   { text-align: right; font-size: 70%; white-space: nowrap; }
  textarea { overflow-x: auto; }
  .linenr { font-size: smaller }
  .code-highlighted { background-color: #ffff00; }
  .org-info-js_info-navigation { border-style: none; }
  #org-info-js_console-label
    { font-size: 10px; font-weight: bold; white-space: nowrap; }
  .org-info-js_search-highlight
    { background-color: #ffff00; color: #000000; font-weight: bold; }
  .org-svg { width: 90%; }
  /*]]>*/-->
</style>
<style type="text/css">.src-makefile {background-color: #222; color: #ccc}</style>
<style type="text/css">.src-sh {background-color: #222; color: #ccc}</style>
<script type="text/javascript">
/*
@licstart  The following is the entire license notice for the
JavaScript code in this tag.

Copyright (C) 2012-2013 Free Software Foundation, Inc.

The JavaScript code in this tag is free software: you can
redistribute it and/or modify it under the terms of the GNU
General Public License (GNU GPL) as published by the Free Software
Foundation, either version 3 of the License, or (at your option)
any later version.  The code is distributed WITHOUT ANY WARRANTY;
without even the implied warranty of MERCHANTABILITY or FITNESS
FOR A PARTICULAR PURPOSE.  See the GNU GPL for more details.

As additional permission under GNU GPL version 3 section 7, you
may distribute non-source (e.g., minimized or compacted) forms of
that code without the copy of the GNU GPL normally required by
section 4, provided you include this license notice and a URL
through which recipients can access the Corresponding Source.


@licend  The above is the entire license notice
for the JavaScript code in this tag.
*/
<!--/*--><![CDATA[/*><!--*/
 function CodeHighlightOn(elem, id)
 {
   var target = document.getElementById(id);
   if(null != target) {
     elem.cacheClassElem = elem.className;
     elem.cacheClassTarget = target.className;
     target.className = "code-highlighted";
     elem.className   = "code-highlighted";
   }
 }
 function CodeHighlightOff(elem, id)
 {
   var target = document.getElementById(id);
   if(elem.cacheClassElem)
     elem.className = elem.cacheClassElem;
   if(elem.cacheClassTarget)
     target.className = elem.cacheClassTarget;
 }
/*]]>*///-->
</script>
</head>
<body>
<div id="content">
<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#orgc590555">1. <div style="color:#369">今日计划</div></a></li>
<li><a href="#org68bb58c">2. <div style="color:#369">今日收获</div></a>
<ul>
<li><a href="#org17196f4">2.1. 写Makefile</a></li>
</ul>
</li>
<li><a href="#orgc3d6ad7">3.  <div style="color:#369">todo</div></a></li>
<li><a href="#orgdc5b787">4.  <div style="color:#369">明日计划</div></a></li>
</ul>
</div>
</div>


<div id="outline-container-orgc590555" class="outline-2">
<h2 id="orgc590555"><span class="section-number-2">1</span> <div style="color:#369">今日计划</div></h2>
<div class="outline-text-2" id="text-1">
<ul class="org-ul">
<li>看盲源分离和神经网络方面的知识,以及查找其他代替方法</li>
<li>15号将程序写出来以及论文弄好(还有五天)</li>
<li>有道口语一课（切记）</li>
</ul>
</div>
</div>


<div id="outline-container-org68bb58c" class="outline-2">
<h2 id="org68bb58c"><span class="section-number-2">2</span> <div style="color:#369">今日收获</div></h2>
<div class="outline-text-2" id="text-2">
</div><div id="outline-container-org17196f4" class="outline-3">
<h3 id="org17196f4"><span class="section-number-3">2.1</span> 写Makefile</h3>
<div class="outline-text-3" id="text-2-1">
<p>
&ensp;&ensp; Make是一个可扩展性极强的编译构建工具，将它和相关语言的编译器结合起来，我们几乎可以用它来
编译构建任何编程语言程序。
</p>

<p>
 <div style="color:#369"> Makefile的基本语法结构</div>
</p>

<p>
&ensp;&ensp; make主要是通过默认的 <code>Makefile</code> 或 <code>makefile</code> 的配置文件(下文统一称 <code>makefile</code> )中的规则来构建项目的。 <code>makefile</code> 其实是有无数的规则组成的。
我们可以用这些规则来编译，链接，以及运行相关命令和脚本。这些规则的语法大概是这样的:
</p>

<div class="org-src-container">
<pre class="src src-makefile"><span style="color: #FFD2A7;">target(&#35268;&#21017;&#29983;&#25104;&#30340;&#30446;&#26631;&#25991;&#20214;&#25110;&#32773;make&#25191;&#34892;&#30340;&#35268;&#21017;&#21629;&#20196;&#21517;) &#8230;</span> : prerequisitse(&#35268;&#21017;&#30340;&#36755;&#20837;&#25991;&#20214;&#65292;&#25110;&#28304;&#25991;&#20214;) &#8230;
        recipe(make&#25191;&#34892;&#30340;&#35268;&#21017;&#21629;&#20196;)
        &#8230;
        &#8230;
</pre>
</div>

<p>
 &ensp;&ensp; recipe（规则命令）必须有一个制表符(TAB)。并且如果一旦任何一个源文件变化了，规则命令都会重新执行，否则不会。
<code>make</code> 检测文件的是否修改是通过文件的上次修改时间来确定的
</p>


<p>
 <div style="color:#369">一个典型的 ~makefile~ 的例子</div>
</p>

<div class="org-src-container">
<pre class="src src-makefile"><span style="color: #c5c8c6; background-color: #1d1f21;">IDIR</span>=../include  
<span style="color: #c5c8c6; background-color: #1d1f21;">CC</span>=gcc     
<span style="color: #c5c8c6; background-color: #1d1f21;">CFLAGS</span>=-I$(<span style="color: #c5c8c6; background-color: #1d1f21;">IDIR</span>) 
<span style="color: #c5c8c6; background-color: #1d1f21;">ODIR</span>=obj 
<span style="color: #c5c8c6; background-color: #1d1f21;">LDIR</span>=../lib
<span style="color: #c5c8c6; background-color: #1d1f21;">LIBS</span>=-Im
<span style="color: #c5c8c6; background-color: #1d1f21;">_DEPS</span>=hellomake.h
<span style="color: #c5c8c6; background-color: #1d1f21;">DEPS</span> = $(<span style="color: #c5c8c6; background-color: #1d1f21;">patsubst</span> %,$(<span style="color: #c5c8c6; background-color: #1d1f21;">IDIR</span>)/%,$(<span style="color: #c5c8c6; background-color: #1d1f21;">_DEPS</span>))

<span style="color: #c5c8c6; background-color: #1d1f21;">_OBJ</span>=hellomake.o hellofunc.o
<span style="color: #c5c8c6; background-color: #1d1f21;">OBJ</span>=$(<span style="color: #c5c8c6; background-color: #1d1f21;">patsubst</span> %,$(<span style="color: #c5c8c6; background-color: #1d1f21;">ODIR</span>)/%,$(<span style="color: #c5c8c6; background-color: #1d1f21;">_OBJ</span>))

<span style="color: #FFD2A7;">$(</span><span style="color: #FFD2A7; background-color: #1d1f21;">ODIR</span><span style="color: #FFD2A7;">)/%.o</span>:%.c $(<span style="color: #c5c8c6; background-color: #1d1f21;">DEPS</span>)
        $(<span style="color: #c5c8c6; background-color: #1d1f21;">CC</span>) -c -o <span style="color: #FFD2A7;">$</span><span style="color: #99CC99;">@</span> $<span style="color: #99CC99;">&lt;</span> $(<span style="color: #c5c8c6; background-color: #1d1f21;">CFLAGS</span>)

<span style="color: #FFD2A7;">hellomake</span>: $(<span style="color: #c5c8c6; background-color: #1d1f21;">OBJ</span>)
        $(<span style="color: #c5c8c6; background-color: #1d1f21;">CC</span>) -o <span style="color: #FFD2A7;">$</span><span style="color: #99CC99;">@</span> $<span style="color: #99CC99;">^</span> ${<span style="color: #c5c8c6; background-color: #1d1f21;">CFLAGS</span>} $(<span style="color: #c5c8c6; background-color: #1d1f21;">LIBS</span>)


<span style="color: #FFD2A7;">.PHONY</span>: clean


<span style="color: #FFD2A7;">clean</span>:
        rm -f $(<span style="color: #c5c8c6; background-color: #1d1f21;">ODIR</span>)/*.o *~core $(<span style="color: #c5c8c6; background-color: #1d1f21;">INCDIR</span>)/*~
</pre>
</div>

<p>
<code>文件结构</code>
</p>

<div class="org-src-container">
<pre class="src src-sh">&#9500;&#9472;&#9472; include
&#9474;&#160;&#160; &#9492; hellomake.h
&#9500;&#9472;&#9472; lib
&#9492;&#9472;&#9472; src
    &#9500;&#9472;&#9472; hellofunc.c
    &#9500;&#9472;&#9472; hellomake
    &#9500;&#9472;&#9472; hellomake.c
    &#9500;&#9472;&#9472; makefile
    &#9492;&#9472;&#9472; obj
        &#9500;&#9472;&#9472; hellofunc.o
        &#9492;&#9472;&#9472; hellomake.o
</pre>
</div>

<p>
 &ensp;&ensp;  这个makefile文件会做如下工作
</p>

<ol class="org-ol">
<li>将 <code>src</code> 目录下的 <code>hellofunc.c</code> 和 <code>hellomake.c</code> 的源文件编译到 <code>obj</code> 目录下,分别生成 <code>hellofunc.o</code> 和 <code>hellmake.o</code> 目标文件</li>
<li>利用 <code>obj</code> 目录下的 <code>hellofunc.o</code> 和 <code>hellomake.o</code> 的目标文件和 <code>include</code> 目录下的 <code>hellomake.h</code> 文件，以及 <code>math</code> 库链接在 <code>src</code> 目录下生成 <code>hellomake</code> 可执行程序</li>
</ol>

<p>
 &ensp;&ensp;  等价于运行以下程序
</p>

<div class="org-src-container">
<pre class="src src-sh">gcc -c -o obj/hellofunc.o  hellofunc.c -I ./include
gcc -c -o obj/hellomake.o  hellomake.c -I ./include
gcc -o hellomake hellomake.o hellofunc.o  -I ./include -Im
</pre>
</div>

<p>
 <div style="color:#369"> makefile中的标准规则 </div>
</p>


<p>
 &ensp;&ensp;  <code>makefile</code> 中定义了许多标准规则，我们可以直接在 <code>makefile</code> 中使用。
</p>

<ul class="org-ul">
<li><b>all</b></li>
</ul>

<p>
 &ensp;&ensp; 
</p>

<p>
 <div style="color:#369"> 生成多个源文件分别生成多个可执行文件</div>
</p>


<div class="org-src-container">
<pre class="src src-makefile"><span style="color: #c5c8c6; background-color: #1d1f21;">CC</span>=g++
<span style="color: #c5c8c6; background-color: #1d1f21;">BINDIR</span>=./bin/
<span style="color: #c5c8c6; background-color: #1d1f21;">LDFLAGS</span>=-std=c++11
<span style="color: #c5c8c6; background-color: #1d1f21;">OBJ</span>=InterviewProblems.cpp InterviewProblems_claimed_correct.cpp
<span style="color: #c5c8c6; background-color: #1d1f21;">EXECUTABLE</span>=InterviewProbles InterviewProblems_claimed_correct


<span style="color: #FFD2A7;">all</span>:  InterviewProblems  InterviewProblems_claimed_correct

<span style="color: #FFD2A7;">InterviewProblems</span>: InterviewProblems.cpp
        $(<span style="color: #c5c8c6; background-color: #1d1f21;">CC</span>) $(<span style="color: #c5c8c6; background-color: #1d1f21;">LDFLAGS</span>) -o $(<span style="color: #c5c8c6; background-color: #1d1f21;">BINDIR</span>)<span style="color: #FFD2A7;">$</span><span style="color: #99CC99;">@</span>  $<span style="color: #99CC99;">^</span>
<span style="color: #FFD2A7;">InterviewProblems_claimed_correct</span>: InterviewProblems_claimed_correct.cpp
        $(<span style="color: #c5c8c6; background-color: #1d1f21;">CC</span>) $(<span style="color: #c5c8c6; background-color: #1d1f21;">LDFLAGS</span>) -o $(<span style="color: #c5c8c6; background-color: #1d1f21;">BINDIR</span>)<span style="color: #FFD2A7;">$</span><span style="color: #99CC99;">@</span>  $<span style="color: #99CC99;">^</span>
</pre>
</div>

<p>
<code>文件目录结构</code>
</p>

<div class="org-src-container">
<pre class="src src-sh">&#9500;&#9472;&#9472; bin
&#9474;&#160;&#160; &#9500;&#9472;&#9472; InterviewProblems
&#9474;&#160;&#160; &#9492;&#9472;&#9472; InterviewProblems_claimed_correct
&#9500;&#9472;&#9472; InterviewProblems_claimed_correct.cpp
&#9500;&#9472;&#9472; InterviewProblems.cpp
&#9500;&#9472;&#9472; makefile
</pre>
</div>

<p>
 &ensp;&ensp; 该 <code>makefile</code> 分别将 <code>InterviewProblems.cpp</code> 和 <code>InterviewProbles_claimed_correct.cpp</code> 编译成 <code>bin</code> 目录下的 <code>InterviewProblems</code> 和 <code>InterviewProblems_claimed_correct</code> 可执行文件。
</p>
</div>
</div>
</div>


<div id="outline-container-orgc3d6ad7" class="outline-2">
<h2 id="orgc3d6ad7"><span class="section-number-2">3</span>  <div style="color:#369">todo</div></h2>
<div class="outline-text-2" id="text-3">
<ul class="org-ul">
<li>详细了解cpp中的function-&gt;return type的用法</li>
<li>写一个管理markdown的博客vim插件(参考vim的vimwiki插件)</li>
<li>了解C++中的异常的使用</li>
<li>在emacs或者vim中实现一个小的智能程序</li>
<li>写一个类似Mac中的高亮当前鼠标位置的效果(Linux下)</li>
<li>在vim移植emacs的org-mode(针对markdown)</li>
<li>命令行的qq聊天(vim-plugin,emacs-plugin)</li>
<li>探究真正意义上的人工智能</li>
<li>学习黑客的思维</li>
<li>写个备份Gentoo Linux的脚本(Live版本,iso格式)</li>
<li>写个像Grammerly的功能的软件</li>
<li>写方面绑定手机的各种账号更换</li>
<li>看王垠的40行代码</li>
<li>学习scheme语言</li>
<li>详细看《Chapter 13. Copy contral》</li>
<li>详细看《 Chapter 12. Dynamic Memory》</li>
<li>详细看《13.1.4（p. 504）》</li>
<li>了解C++里面的lamda表达式</li>
<li>C++的线程相关操作</li>
<li>看825页的dynamic<sub>cast</sub>(看完虚函数再看)</li>
<li>《 CPP prime 》 看到Circumventing the Virtual Mechanism</li>
<li>grub,UEFI,Legacy,Windows Loader,以及其他相关加载器的相关知识</li>
</ul>
</div>
</div>

<div id="outline-container-orgdc5b787" class="outline-2">
<h2 id="orgdc5b787"><span class="section-number-2">4</span>  <div style="color:#369">明日计划</div></h2>
</div>
</div>
<div id="postamble" class="status">
<p class="date">Created: 2017-04-22 Sat 21:02</p>
<p class="validation"><a href="http://validator.w3.org/check?uri=referer">Validate</a></p>
</div>
</body>
</html>
