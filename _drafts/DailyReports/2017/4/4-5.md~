#### <div style="color:#369">今日计划</div>

+ 完成web界面的搭建
+ 有道口语一课
+ 看盲源分离和神经网络方面的知识,以及查找其他代替方法
+ 看OOP编程直到Conversions and Inheritence.


#### <div style="color:#369">今日收获</div>

#### <div style="color:#369">C++中OOP编程</div> 

&ensp;&ensp;C++中的面向对象编程的核心为: 

+ 数据抽象
+ 继承
+ 动态绑定


**继承**

&ensp;&ensp; 父类可以定义一些普通方法，也可以定义虚方法。普通方法，子类可以直接继承使用，而虚方法，子类也可以继承并且定义它们。

&ensp;&ensp; 类可以通过类名后`:`后指定需要继承的基类列表，每一个基类名可以使用访问限定符号来修饰，`public`,`private`,`protected`

```cpp

class Quote {

public:
  string isbn() const;
  virtual double net_price(size_t n) const;
  
};

```

```cpp
class Bulk_quote : public Quote {

public:
  double net_price(std::size_t) const override;

}
```

&ensp;&ensp;父类的虚方法，在子类中也默认为虚方法，所以在子类中实现的时候并不需要指定`virtual`关键字。可以在实现方法的参数列表后面指定`override`来覆盖它继承的虚方法的定义。

&ensp;&ensp;基类中定义虚方法，需要同时提供方法体，不然后报(`undefined reference to vtable for Quote'`的错误)

&ensp;&ensp; 虚方法有普通方法相同的属性，如果子类没有重新声明或者重写父类的子方法，那么父类的虚方法会被子类继承。

&ensp;&ensp; `virtual`关键字只能出现在类内，不能出现在类外。

&esnp;&esnp;`virtual`关键字只能用来修饰非`const`成员方法。



&ensp;&enspp;`protected`访问权限修饰符号，表示只有在类内和相关继承子类中访问。

**注意**

> 基类最好定义一个虚构造方法。即使虚构造方法不会使用。


*虚函数和普通函数的区别*

+ 虚方法可以使用`override`关键字来指定覆盖父类中的虚方法

+ 当方法通过一个基类的引用或者指针调用的时候，当方法是一个虚方法时，会产生动态绑定。（而普通方法，一般是在编译的时候绑定，不是运行的时候绑定）

+ 虚方法只能是非`const`成员方法


*子类到基类的默认转换*
 
&ensp;&ensp;当我们将一个子类的类型，引用或指针用在需要基类类型，引用或者指针的地方，编译器会默认的将子类转换成基类的类型。

```cpp 
  Quote item;
  Bulk_quote bulk;
  Quote *p = &item;
  p = &bulk;
  Quote &r = bulk;
```

**注意**

> 实际上C++中的子类中都持有一个基类的子对象来实现继承。

**初始化**

&ensp;&ensp; 在子类的初始化器中只能用父类的构造器来初始化继承来自父类的成员，但是在构造器的方法体中可以初始化继承来自父类的`public`,`protected`成员。

&ensp;&ensp; 父类成员的初始化需要在子类成员的初始化之前

```cpp
  
  Bulk_quote(const string& book , double p, size_t qty, double disc):
  Quote(book, p), min_qty(qty),discount(disc) {
  };

```

*注意:*

> 尽管子类可以使用构造器的方法体来初始化继承来自父类的public`或`protected`成员，但是最好还是通过父类的构造方法来初始化，保证父类接口的独立性。


**防止被继承**

&ensp;&ensp;可以使用`final`关键字来修饰类，防止类被继承。

```cpp
   
   class NoDerived final { }  //NoDerived 不能作为一个基类
   
   class Base {};
   
   class Last final: Base {}; // Last不能作为一个基类
   
   class Bad: NoDerived {} ; 错误, NoDerived类不能被继承。
   class Bad2: Last { }; // 错误, Last 不能作为一个基类
   

```

#### <div style="color:#369"> 看Effective C plus plus 看到了 Conversion and Inheritance</div>


#### <div style="color:#369">todo</div>
+ 详细了解cpp中的function->return type的用法
+ 写一个管理markdown的博客vim插件(参考vim的vimwiki插件)
+ 了解C++中的异常的使用
+ 在emacs或者vim中实现一个小的智能程序
+ 写一个类似Mac中的高亮当前鼠标位置的效果(Linux下)
+ 在vim移植emacs的org-mode(针对markdown)
+ 命令行的qq聊天(vim-plugin,emacs-plugin)
+ 探究真正意义上的人工智能
+ 学习黑客的思维
+ 写个备份Gentoo Linux的脚本(Live版本,iso格式)
+ 写个像Grammerly的功能的软件
+ 写方面绑定手机的各种账号更换
+ 看王垠的40行代码
+ 学习scheme语言
+ 详细看《Chapter 13. Copy contral》
+ 详细看《 Chapter 12. Dynamic Memory》
+ 详细看《13.1.4（p. 504）》
+ 了解C++里面的lamda表达式
+ C++的线程相关操作
+ 看825页的dynamic_cast(看完虚函数再看)

#### <div style="color:#369">明日计划</div>

+《 CPP prime 》 看到Circumventing the Virtual Mechanism






