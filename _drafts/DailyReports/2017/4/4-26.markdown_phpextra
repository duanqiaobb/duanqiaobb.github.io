<style type="text/css">.src-makefile {background-color: #222; color: #ccc}</style>

<style type="text/css">.src-sh {background-color: #222; color: #ccc}</style>

<style type="text/css">.src-C {background-color: #222; color: #ccc}</style>

<style type="text/css">.src-C\+\+ {background-color: #222; color: #ccc}</style>

<div style="color:#369">今日计划</div> {#section}
======================================

-   30前将普通傅里叶变化的算法和web程序写出来以及论文弄好(还有4天)
-   有道口语一课（切记）

<div style="color:#369">今日收获</div> {#section-1}
======================================

C语言中的复数操作 {#c语言中的复数操作}
-----------------

复数在数学运算中十分重要，在编写数值运算或者算法的时候，我们会用到复数这种概念。
那么，复数在C/C++语言中是如何表示的呢？我们接下来一一介绍。

-   C语言中复数

    在数学中一个复数可以定义为 *z* = *a* + *b**i* 的形式。 `C` 语言在
    `ISO C99` 时就引入了复数类型。它是通过 `complex.h` 中定义的。

我们可以使用 `complex` , `__complex__` , 或 `_ComplexI`
类型符号来表示。在C语言中有三种复数类型，分别为 `float complex` ,
`double complex` , `long double complex` 。他们之间
的区别就是表示复数中实部和虚步的数的数据类型不同。 `complex`
其实就是一个数组，数组中有两个元素，一个表示复数的实部，一个表示复数的虚部。

-   定义一个复数

    在 `complex.h` 头文件中定义了两个宏 `_Complex_I` 和 `I`
    来创建一个复数。

~~~~ c
Macro: const float complex _Complex_I;
Macro: const float complex  I;
~~~~

这两个宏表示复数 0 + 1*i* , 我们可是使用这个单位复数来创建任何复数。


    #include <stdio.h>
    #include <complex.h>

    int main(int argc, char *argv[])
    {
      complex  double  a = 3.0 + 4.0 * _Complex_I;
      __complex__ double b = 4.0 + 5.0 * _Complex_I;
      _Complex  double c = 5.0 + 6.0 * _Complex_I;

      printf("a=%f+%fi\n", creal(a),cimag(a));
      printf("b=%f+%fi\n", creal(b), cimag(b));
      printf("c=%f+%fi\n", creal(c), cimag(c));



      printf("the arg of a is %d", carg(a));

      return 0;
    }

-   复数的基本操作函数

    在 `complex.h` 头文件中定义一些对复数的基本操作的函数。

| 函数  | 功能                                                                 |
|-------|----------------------------------------------------------------------|
| creal | 获取复数的实部                                                       |
| cimag | 获取复数的虚部                                                       |
| conj  | 获取复数的共轭                                                       |
| carg  | 代表,复平面上穿过原点和复数在复平面表示的点,的直线和实数轴之间的夹角 |
| cproj | 返回复数在黎曼球面上的投影                                           |

-   复数的数值操作

    复数类型也可以像普通数值类型， `int, double, long`
    一样进行直接使用数值操作符号，进行数值操作。

<!-- -->

    #include <stdio.h>
    #include <complex.h>

    int main(int argc, char *argv[])
    {
      complex  double  a = 3.0 + 4.0 * _Complex_I;
      __complex__ double b = 4.0 + 5.0 * _Complex_I;
      _Complex  double c = 5.0 + 6.0 * _Complex_I;

      complex double d =a + b;
      complex double f = a *b ;
      complex double g = a/b;

      printf ("d=a+b=%f+%fi\n",creal(d),cimag(d));
      printf ("f=a*b=%f+%fi\n",creal(f),cimag(f));
      printf("g=a/b=%f+%fi\n",creal(g),cimag(g));

      return 0;
    }

C++中的复数 {#c中的复数}
-----------

C++中的复数操作在C语言基础上引进了面向对象的特性，在 `C++` 头文件在
`complex` 中定义了一个 `complex` 类用来表示复数。同时为了兼容 `C` 的
`complex` 类型，也提供了一个 `complex.h` 的头文件。 不同的是，在
`complex.h` 头文件中， `complex` 关键字被废弃，只能使用 `_Complex` 和
`__complex__` 来使用 C风格的复数形式。

-   复数的定义

    在C++中可以使用两种方式定义一个复数，一个使用C风格 `_Complex` 和
    `__complex__` ，一个是使用 `complex` 类。

<!-- -->


    #include <iostream>
    #include <complex>
    #include <complex.h>
    using namespace std;
    int main(int argc, char *argv[])
    {
      complex<double> mycomplex(2.000,2);
      _Complex double  mycomplex2 = 2.000 + 3I;
      __complex__ double mycomplex3 = 2.000 + 4I;

      cout << mycomplex << endl;
      cout << "(" << creal(mycomplex2) << "," << cimag(mycomplex2) << ")" << endl;
      cout << "(" << creal(mycomplex3) << "," << cimag(mycomplex3) << ")" << endl;
      return 0;
    }

-   复数的基本操作函数

    在C++中既可以使用 `C` 风格的相关函数。

| 函数  | 功能                                                                 |
|-------|----------------------------------------------------------------------|
| creal | 获取复数的实部                                                       |
| cimag | 获取复数的虚部                                                       |
| conj  | 获取复数的共轭                                                       |
| carg  | 获取,复平面上穿过原点和复数在复平面表示的点,的直线和实数轴之间的夹角 |
| cproj | 返回复数在黎曼球面上的投影                                           |

也可以使用 `complex` 类中的相关操作方法。

| 方法            | 功能                                                                 |
|-----------------|----------------------------------------------------------------------|
| complex.real()  | 获取复数的实部                                                       |
| complex.imag()  | 获取复数的虚部                                                       |
| complex.abs()   | 获取复数的绝对值                                                     |
| complex.arg()   | 获取,复平面上穿过原点和复数在复平面表示的点,的直线和实数轴之间的夹角 |
| complex.norm()  | 获取复数的范数                                                       |
| complex.conj()  | 获取复数的共轭                                                       |
| complex.polar() | 获取极坐标对应的复数                                                 |
| complex.proj()  | 返回复数在黎曼球面上的投影                                           |

 <div style="color:#369">todo</div> {#section-2}
===================================

-   详细了解cpp中的function-&gt;return type的用法
-   写一个管理markdown的博客vim插件(参考vim的vimwiki插件)
-   了解C++中的异常的使用
-   在emacs或者vim中实现一个小的智能程序
-   写一个类似Mac中的高亮当前鼠标位置的效果(Linux下)
-   在vim移植emacs的org-mode(针对markdown)
-   命令行的qq聊天(vim-plugin,emacs-plugin)
-   探究真正意义上的人工智能
-   学习黑客的思维
-   写个备份Gentoo Linux的脚本(Live版本,iso格式)
-   写个像Grammerly的功能的软件
-   写方面绑定手机的各种账号更换
-   看王垠的40行代码
-   学习scheme语言
-   详细看《Chapter 13. Copy contral》
-   详细看《 Chapter 12. Dynamic Memory》
-   详细看《13.1.4（p. 504）》
-   了解C++里面的lamda表达式
-   C++的线程相关操作
-   看825页的dynamic<sub>cast</sub>(看完虚函数再看)
-   《 CPP prime 》 看到Circumventing the Virtual Mechanism
-   grub,UEFI,Legacy,Windows Loader,以及其他相关加载器的相关知识

 <div style="color:#369">明日计划</div> {#section-3}
=======================================
