#### <div style="color:#369">今日计划</div>

+ C++中的几种类型的constructor(copy,move)
+ 有道口语一课
+ C++面向对象看完直到友元

#### <div style="color:#369">今日收获</div>

**C++下的输入和输出**

&ensp;&ensp;C++中的输入和输出，主要分为`std::cout`,`std::cin`,`std::cerr`,`std::clog`分别对应着标准输入，标准输出，标准错误输出， 标准日志输出。它门还有对应的宽字符版本`std::wcout`,`std::wcin`和`std::wcerr`，`std::wclog`, `cout`和`cerr`以及`clog`都是`ostream`对象的实例。`cin`是一个`istream`实例

&ensp;&ensp;我们可以使用IO操作符`>>`和`<<`，来进行输入输出操作。

``` cpp

  #inlcude <iostream>

  int main() {
    string input;
    //标准输入	
    std::cin >> input;
    //标准输出
	std::cout << input << std::endl;
	//标准错误输出
	std::cerr << input << std::endl;
	//标准日志输出
	std::clog << input << std::endl;
  }

```

p&ensp;&ensp;这些对象在`<iostream>`头文件包含进来后，就被初始化了。同时,`cin`绑定`cout`，我们可以通过`tie()`方法，来访问`cin`绑定的`cout`

``` cpp

#include <iostream>
#include <fstream>

using namespace std;
int main() {
  ostream *prestr;
  ofstream ofs;
  ofs.open("test.txt");
  cout << "tie example:\n";
  *cin.tie() << "This is inserted into cout";
  prestr  = cin.tie(&ofs);
  *cin.tie() << "This is inserted into the file";
  cin.tie(prestr);
  ofs.close();
  return 0;
}
```

&ensp;&ensp;我们也可以通过相应的成员函数进行输入输出操作。在C++中我们除了可以使用IO操作符号进行输入输出，我们还可以通过相应的`read`和`write`函数进行输入和输出操作。


&ensp;&ensp;使用`read`进行输入操作

&ensp;&ensp;`std::istream::read()`

``istream& read (char* s, streamsize n);`

&ensp;&ensp;参数:

&ensp;`s`, 存储读取的字符串

&ensp;`n`, 需要读取的字符数量，`streamsize`是一个无符号整型

``` cpp
#include <iostream>
#include <string>


using namespace std;

const int N = 15;

int main(int argc, char *argv[])
{
  char * buff = new char[N];
  
  cout << "Please input your string:" << endl;

  cin.read(buff, N);

  cout << buff << endl;
  return 0;
}
  
```

&ensp;&ensp;获取一行输入

&ensp;`std::getline`

&ensp;`istream& getline (istream &is, string& str)`

&ensp;&ensp;`@参数`
             
&ensp;&ensp; `is` 指要获取输入的流

&ensp;&ensp; `str` 指存储读取的字符的字符串

&ensp;&ensp;` @返回值` 

&ensp;&ensp;  `istream` 流对像


```cpp
  
#include <iostream>
#include <string>

using namespace std;

int main(int argc, char *argv[])
{
  string buff;

  getline(cin, buff);

  cout << buff;
  
  return 0;
}
   
```

&ensp;&ensp;格式化输入

+ 输入vector

``` cpp

#include <cmath>
#include <cstdio>
#include <vector>
#include <iostream>
#include <sstream>
#include <algorithm>
#include <iterator>

using namespace std;

template<class T> void write_vector(const vector<T> &);

int main() {
  std::string line;
  int number;
  std::vector<int> numbers;

  std::cout << "Enter numbers sparated by spaces:";
  std::getline(cin, line);

  std::istringstream stream(line);
  while (stream >> number)
    numbers.push_back(number);
  write_vector(numbers);
}

template<class T>
void write_vector(const std::vector<T>& v) {

  cout << "Numbers you entered:";
  copy(v.begin() , v.end(), ostream_iterator<T>(cout, " "));
  cout << endl;
}

```

```shell
Enter numbers sparated by spaces: 1 2 3 4 5 6
Numbers you entered:1 2 3 4 5 6
```





&ensp;&ensp;使用成员函数`write`进行输出。

&ensp;`std::ostream::write`

&ensp;&ensp;`ostream& write(const char*s, streamsize n);`

&ensp;&ensp;参数:
`s` 表示将要输出的字符串
`n` 表示将要输出的字符串的大小


```cpp

#include <iostream>
#include <string>
#include <string.h>

using namespace std;
int main(int argc, char *argv[])
{
  const char * buff =  "This is a string to be writen";
  int buff_size = strlen(buff);
  cout.write(buff, buff_size);
  
  return 0;
}

```


**格式化输出**

&ensp;&ensp;输出一定精度的小数

``` cpp

#include <iostream>
#include <limits>

using namespace std;

int main() {

   double d2; 
   cin >> d2;
   cout.precision(1);
   cout << fixed << d2 << endl;
   
   return 0;
}

```
&ensp;&ensp;输出进制数



``` cpp

#include <iostream>

using namespace std;
int main() {
  //输出十六进制数
  cout << hex << 255;
  //输出八进制
  cout << octal << 255;
  return 0;
}

```

&ensp;&ensp;输出科学计数法

```cpp

#include <iostream>
using namespace std;
int main(int argc, char *argv[])
{
  double a = 3.1415926534;
  double b = 2006.0;
  double c = 1.0e-10;

  cout.precision(5);

  cout << "scientific:\n" << scientific;
  cout << a << '\n' << b << c << '\n';
  return 0;
}


```



**完成了istream,sstream,ifstream,ofstream, ffstream , istream, ostream相关的类的阅读**


**记了几个单词**

| 单词           | 释义                                               |
| :---:          | :---:                                              |
| gripe          | 激怒,惹恼，握住，抓牢，控制，抱怨                  |
| elabrate       | 详尽的，复杂的，详尽说明，阐述                     |
| transcript     | 抄本，副本，学生成绩单                             |
| overly         | 太，非常,极为                                      |
| immortal       | 不死的，永存的，（诗句，戏剧，歌曲）不朽，流传百世 |
| totem          | 图腾，图腾形象                                     |
| discourteously | 粗鲁地，不礼貌地                                   |
| thou           | 一千，一千分之一                                   |
| goodwill       | 好意，善意，亲善                                   |
| farewell       | 告别，欢送派对，晚宴，酒会，再见，再会             |
| adieu          | 道别，再见                                         |
| prosper        | 兴旺，发达                                         |
| walnut         | 核桃                                               |
| peach          | 桃子，桃树，桃红色                                 |
| plum           | 李子，梅子，李树，深紫红色，令人垂涎的事物         |
| texture        | 口感,手感，质感，质地，押韵                        |
| jelly          | 果冻，果酱，肉冻                                   |
| crispy         | 易碎的，松脆的                                     |
| brittle        | 脆的，易碎的，[情形、关系或感情]脆弱的，冷淡的     |
| gravy          | 肉汁，意外之财，飞来之福                           |


#### <div style="color:#369">todo</div>
+ 详细了解cpp中的function->return type的用法
+ 写一个管理markdown的博客vim插件(参考vim的vimwiki插件)
+ 了解C++中的异常的使用
+ 在emacs或者vim中实现一个小的智能程序
+ 写一个类似Mac中的高亮当前鼠标位置的效果(Linux下)
+ 在vim移植emacs的org-mode(针对markdown)
+ 命令行的qq聊天(vim-plugin,emacs-plugin)
+ 探究真正意义上的人工智能
+ 学习黑客的思维
+ 写个备份Gentoo Linux的脚本(Live版本,iso格式)
+ 写个像Grammerly的功能的软件
+ 写方面绑定手机的各种账号更换
+ 看王垠的40行代码
+ 学习scheme语言
+ 学习C++中的incline特性
+ 详细看《Chapter 13. Copy contral》
+ 详细看《 Chapter 12. Dynamic Memory》
+ 详细看《13.1.4（p. 504）》
+ 了解C++里面的lamda表达式
+ C++的线程相关操作
+ C++中的explicit




#### <div style="color:#369">明日计划</div>

+ C++面向对象看完直到友元
+ C++中的几种类型的constructor(copy,move)
+ 有道口语一课






