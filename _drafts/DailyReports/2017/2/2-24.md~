#### <div style="color:#369">今日计划 </div>

+ 了解C++里面的lamda表达式
+ 学习C++的面向对象的知识
+ 看互联网的24种的思想20页


#### <div style="color:#369">今日收获 </div>
 + C++的auto特性

&ensp;&ensp;auto,是从c++11起引入的一个关键字, 它可以用来修饰变量，函数，表达式，以及类模板参数.

+ C++的decltype特性

&ensp;&ensp;decltype,是作为c++11类型推断而引入的一个新的关键词，它主要用来修饰实体，和表达式, 是用来推测实体的声明类型,或者表达式的值和类型的种类。


+ C++的属性指示符

&ensp;&ensp;C++的属性指示符，有点类似Java中Anotation, 是可以实现定义的。它主要是用来引入一些对象，类型，代码的属性，也可以理解为限制对象，类型，代码的一些行为。它为实现定义的语言扩展提供标准统一的语法，比如GNU和IBM的`__attribute__((…))`,微软的`__declspec()`语言扩展，等等。

&ensp;&ensp;尽管每个特殊的属性仅当实现允许时才有效，但是属性几乎能在C++程序的任何地方使用，同时也可以被应用到,类型，变量，函数，命名，代码块，以及整个的翻译单元，几乎所有的实体上。比如，`[[likely]]`属性只能用在`if`语句上边，不能用在函数声明上;[[omp::parallel()]] 属性只能用在`for`循环语句上，而不能用在类型上面。（这两个属性只是为了举例方便而虚构的，实际并不存在）

&ensp;&ensp;在声明时，属性可能出现在实体声明前后，结合使用的。大多数情况，属性声明都放在实体声明前面，尽管`对齐指示符`的语法有些不同，但是它是`属性指示符`的一部分。它可能出现在`[[]]`属性的地方，也可能和他们混合使用（但是只能用在允许对齐的地方）
&ensp;&ensp;两个连续的左中括号`[[`,只能当引入属性指示符时或者在一个属性的参数中出现

*标准的属性指示符的格式为*

```cpp 

[[identifier]] (since c++11)

[[ using  attribute-namespace::identifier]] (since c++17)

[[identifier(argument-list)]] (since c++11)

[[ using  attribute-namespace:identifier(argument-list)]]  (since c++17)
```

**注意：**

```cpp
   如果 命令空间出现在属性类表的开头，那么属性列表中的其他属性不能指定一个命名空间，该属性
   类列表中的所有属性共享一个命名空间。
```

**标准的属性指示符** 


| 属性指示符名称                               | 用途                                                                            | 引入版本 |
| -----------------------------                | ------------------------------------------------------------------------------- | -------- |
| [[noreturn]]                                 | 表示函数不返回值,并只能应用在函数上面,</br>如果函数真的有返回值，那么该属性无效,并且会给出警告 | c++11    |
| [[carries_dependency]]                       | 表示消耗释放模式的依赖链在函数内外传播,允许编译器跳过一些不必要的栅栏指令       | c++11    |
| [[deprecated]] </br>[[deprecated("reason")]] |                                                                                 | c++14    |
| [[nodiscard]]                                |                                                                                 | c++17    |
| [[maybe_unuesd]]                             |                                                                                 | c++17    |
| [[optimize_for_synchronized]]                |                                                                                 | TM TS    |



*[[noreturn]]*

```cpp

#include <cassert>
[[ noreturn ]]  void f() {
   throw "error";
}

[[ noreturn  ]] void q(int i ) {
  if ( i > 0 ) {
    
    throw "positive";

  }
}

```
[测试代码](https://godbolt.org/g/QryGNb)


*[[carries_dependency]]*

&ensp;&ensp;该属性是个优化属性,它能够优化使用了`memory_order_consume`的代码。它的作用就是转移使用`memory_order_consume`而形成的依赖，将原先通过插入栅指令维持依赖树的方法变为有我们自己来编码维持依赖，从而达到优化的目的。如果一个通过`memory_order_consume`的值被传递给一个函数的参数，那么如果没有使用`[[carries_dependency]]`属性，那么编译器可能会使用一个内存栅指令去保证合适的`memory order`语义的支持，如果一个参数被`[[carries_dependency]]`注释，那么编译器就假定函数体会保存依赖，从而不必生成内存栅，达到优化的目的。同样如果一个函数的返回值以`memory_order_consume`的方式读取，如果没有被`[[carries_dependency]]`修饰，那么编译器需要插入一个栅指令来保证合适`memory order`语义的支持。如果声明`[[carries_dependency]]`,那么栅指令就不必要的了，依赖树转由调用者维持。

&ensp;&ensp;由上面也知道，`[[carries_dependency]]`属性只能应用到函数或lamda表达式的参数处，或者返回值处。

*注意*
&ensp;&ensp;这个属性一定要出现在函数的第一次声明中或者在任何翻译单元的一个属性中。否则程序将会报错。


```cpp

#include <iostream>
#include <atomic>

std::atomic<int *> p;

void print( int * val ) 
{
     std::cout<< *p << std::endl;
}

void print2(int * [[carries_dependency]] val) 
{
    std::cout << *p << std::endl;

}

int main () {

int * local = p.load(std::memory_order_consume);


if (local) 
    std::cout << *local<<std::endl; // 1
if (local)
    print(local); //2
if(local)
    print2(local); //3


}
```

&ensp;&ensp;1处的代码，依赖很清楚，所以编译器知道`local`变量是废弃的，所以它必须确保依赖链被保存，避免内存栅的生成。

&ensp;&ensp;2处的代码，`print`的定义是不透明的，所以编译器必须生成一个内存栅为了,读取`*p`的值的`print`函数能够返回正确的值。

&ensp;&ensp;3处的代码，编译器可以假定，就算`print2`的定义也是不透明的,那么从参数道废弃的值的依赖被保存在指令流中，所以并不一定需要生成内存栅。很显然，`print2`的定义确实保存了这个依赖，所以`[[carries_dependency]]`对`print2`的代码生成有一定的影响。

[测试代码](https://godbolt.org/g/QgocM6)


##### <div style="color:#369">数据依赖性排序：函数注释 </div>
&ensp;&ensp; 

##### <div style="color:#369">数据依赖性排序：原子和内存模型 </div>

**为什么将数据依赖性排序引入原子和内存模型?**

&ensp;&ensp;在C++程序中，并发中，读频繁但是写稀少的数据结构的效率很大程度上影响了一些程序的扩展性。影响主要体现在两个场景上。

+ 读多写少的同步数据结构

&ensp;&ensp;&ensp;&ensp; 读多些少的同步数据结构,在系统内核和服务端软件中都十分常见，比如路由表，软件配置，硬件配置，和安全规则（访问控制权限，防火墙规则）.读写频次比率远远超过1/100000的十分常见。

+ 用于指针中介的发布-订阅语义

&ensp;&ensp;&ensp;&ensp;大多数多进程中的通信采用的是中介指针, 采用的是生产者和消费者模型实现。一线程扮演生产者的角色发布一个指针，而另外一线程则扮演消费者角色，可以通过该指针来访问生产者的信息。在没有完全获取语义的情况下可以访问该数据。

&ensp;&ensp;&ensp;&ensp;在以上的情景中，使用进程间数据依赖性排序能数量级的提高程序的性能和支持进程间数据依赖性排序的机器的扩展性。这样的性能提高是可能的，因为这样的机器能够避免原先需要的高昂的锁消耗，原子指令以及内存栅。


&ensp;&ensp;以下是Linux内核代码中，使用了线程间的数据依赖性排序的代码。

```cpp

struct foo {

    int a;
    struct foo *next;
};

struct foo *head;

void insert(int a) {
    struct foo *p = kmalloc(sizeof(*p), GFP_KERNEL); /* cannot fail */
    spin_lock(&mylock);
    p->a = 1;
    p->next = head;
    smp_wmb(); /* Can be thought of as a store-release fence. */
    head = p;
    spin_unlock(&mylock);
}
，
int getfirstval(void) {
    /** requires head not NULL */
    struct foo *q = rcu_dereference(head); /** see discussion below. */
    int retval = q->a;
    return retval;
}


```

&ensp;&ensp;代码中的getfirstval是返回列表头部的值，比列表不变时所需的开销要稍微多一点（甚至不会超过），但是仍然可以更新。`getfirstval()`中的`rcu_dereferenece()`能以不同的方式实现,为不同类型的机器优化。

+ strong memory ordering (比如： TSO)

   `rcu_dereference()`简单的避免了编译器在读取`head`之前，对`q`上的数据依赖进行排序的优化操作。在这种情况下，代码依靠强排序来避免,`retval`的赋值语句获取预先初始化的`a`值，\因为`p->a=1`一定执行在`p->next=head`之前。

+ 强制数据依赖性排序的弱内存排序

   `rcu_dereference()`同样的避免了编译器在读取`head`之前，对`q`上的数据依赖进行排序的优化操作。可是，在这种情况下，代码依靠机器上的数据依赖排序的执行，来避免`retval`的赋值语句获取预先初始化的`a`值，因为`q->a`依赖于`q`。

+ 无数据依赖性排序的弱内存排序
  
   `rcu_dereference()`提升为负载获取操作。因为这样获取能够避免所有的内存相关的子序列，被`head`的读取重新排序，它必须防止任何依赖`h`的操作序列并`head`读取重新排列。

**相关链接**

&ensp;&ensp;&ensp;&ensp;[C++ Data-Dependency Ordering:Atomics and Memory Model](http://open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2556.html)



##### <div style="color:#369"> 复习和学习了一些英文短语 </div>


#### <div style="color:#369">明天计划</div>
+ 了解C++里面的lamda表达式
+ 学习C++的面向对象的知识
+ 看互联网的24种的思想20页

#### <div style="color:#369">TODO</div>
+ 详细了解cpp中的function->return type的用法
+ 了解c++中的异常的使用

